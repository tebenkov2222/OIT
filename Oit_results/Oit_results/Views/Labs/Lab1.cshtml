@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Docker</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="~/css/lab1.css"/>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="js/lab1.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
</head>
<header>
    <a href="">
        <img class="header-image" src="~/imgs/DockerBig.png" alt="DockerBig"/>
    </a>
</header>
<body>
<div class="main-page">
    <nav class="menu">
        <ul class="nav-bar" id="nav-bar">
            <li><a asp-controller="" asp-action="">Docker</a></li>
            <li><a asp-controller="" asp-action="">История</a></li>
            <li><a asp-controller="" asp-action="">Применение</a></li>
        </ul>
    </nav>
    <section name="info">
        <h1 class="name">Docker</h1>
        <img class="main-img" src="~/imgs/dockerMini.png" alt="" onclick="openImageWindow(this.src)"/>
        <p>Docker — программное обеспечение для автоматизации развёртывания и управления приложениями в средах с поддержкой контейнеризации, контейнеризатор приложений.
            Позволяет «упаковать» приложение со всем его окружением[en] и зависимостями в контейнер, который может быть развёрнут на любой Linux-системе
            с поддержкой контрольных групп в а также предоставляет набор команд для управления этими контейнерами.
            Изначально использовал возможности LXC, с 2015 года начал использовать собственную библиотеку, абстрагирующую виртуализационные возможности ядра Linux — libcontainer.
            С появлением Open Container Initiative начался переход от монолитной к модульной архитектуре.</p>
        <p>Разрабатывается и поддерживается одноимённой компанией-стартапом, распространяется в двух редакциях —
            общественной (Community Edition) по лицензии Apache 2.0 и для организаций (Enterprise Edition) по проприетарной лицензии[10]. Написан на языке Go.</p>
        <br/>
        <p>Проект начат как внутренняя собственническая разработка компании dotCloud, основанной Соломоном Хайксом (Solomon Hykes) в 2008 году
            с целью построения публичной PaaS-платформы с поддержкой различных языков программирования.
            Наряду с Хайксом в первоначальной разработке значительное участие приняли инженеры dotCloud Андреа Лудзарди (Andrea Luzzardi)
            и Франсуа-Ксавье Бурле (François-Xavier Bourlet).</p>
        <p>В марте 2013 года код Docker был опубликован под лицензией Apache 2.0[11].
            В июне 2013 года генеральным директором в dotCloud приглашён Бен Голуб (англ. Ben Golub),
            ранее руководивший фирмой Gluster[en] (разрабатывавшей технологию распределённого хранения GlusterFS и поглощённой за $136 млн Red Hat в 2011 году)[12].
            В октябре 2013 года, подчёркивая смещение фокуса к новой ключевой технологии, dotCloud переименована в Docker
            (при этом PaaS-платформа сохранена под прежним названием — dotCloud).</p>
        <p>В октябре 2013 года выпущен релиз Havana тиражируемой IaaS-платформы OpenStack, в котором реализована поддержка Docker (как драйвер для OpenStack Nova).
            С ноября 2013 года частичная поддержка Docker включена в дистрибутив Red Hat Enterprise Linux версии 6.5[13] и полная —
            в 20-ю версию дистрибутива Fedora, ранее было достигнуто соглашение с Red Hat о включении с 2014 года Docker в тиражируемую PaaS-платформу OpenShift[14].
            В декабре 2013 года объявлено о поддержке развёртывания Docker-контейнеров в среде Google Compute Engine[en][15].</p>
        <p>С 2014 года ведутся работы по включению поддержки Docker в среду управления фреймворка распределённых приложений Hadoop;
            по результатам тестирования вариантов платформы виртуализации для Hadoop, проведённом в мае 2014 года,
            Docker показал на основных операциях (по массовому созданию, перезапуску и уничтожению виртуальных узлов) существенно более высокую производительность,
            нежели KVM, в частности, на тесте массового создания виртуальных вычислительных узлов прирост потребления процессорных ресурсов в Docker
            зафиксирован в 26 раз ниже, чем в KVM, а прирост потребления ресурсов оперативной памяти — втрое ниже[16].</p>
        <p>С 2017 года вдобавок к свободно распространяемой под лицензией Apache 2.0 редакции продукта выпускается редакция для организаций,
            продаваемая по ценам от $750 до $2 тыс. в год на узел в зависимости от доступных функций[10].</p>
        <p>Программное обеспечение функционирует в среде Linux с ядром, поддерживающим контрольные группы и изоляцию пространств имён (namespaces);
            существуют сборки только для платформ x86-64 и ARM[18].
            Начиная с версии 1.6 (апрель 2015 года) возможно использование в операционных системах семейства Windows[19].</p>
        <figure class="sign">
            <img class="docker-linux-img" src="~/imgs/DockerLinux.png" onclick="openImageWindow(this.src)"/>
            <a class="docker-linux-img-descr">Docker на физическом Linux-сервере</a>
        </figure>
        <p>Для экономии пространства хранения проект использует файловую систему Aufs с поддержкой технологии каскадно-объединённого монтирования:
            контейнеры используют образ базовой операционной системы, а изменения записываются в отдельную область.
            Также поддерживается размещение контейнеров в файловой системе Btrfs с включённым режимом копирования при записи.</p>
        <p>В состав программных средств входит демон — сервер контейнеров (запускается командой docker -d), клиентские средства,
            позволяющие из интерфейса командной строки управлять образами и контейнерами,
            а также API, позволяющий в стиле REST управлять контейнерами программно.</p>
        <p>Демон обеспечивает полную изоляцию запускаемых на узле контейнеров на уровне файловой системы (у каждого контейнера собственная корневая файловая система),
            на уровне процессов (процессы имеют доступ только к собственной файловой системе контейнера, а ресурсы разделены средствами libcontainer),
            на уровне сети (каждый контейнер имеет доступ только к привязанному к нему сетевому пространству имён и соответствующим виртуальным сетевым интерфейсам).</p>
        <p>Набор клиентских средств позволяет запускать процессы в новых контейнерах (docker run), останавливать и запускать контейнеры (docker stop и docker start),
            приостанавливать и возобновлять процессы в контейнерах (docker pause и docker unpause).
            Серия команд позволяет осуществлять мониторинг запущенных процессов (docker ps по аналогии с ps в Unix-системах, docker top по аналогии с top и другие).
            Новые образы возможно создавать из специального сценарного файла (docker build, файл сценария носит название Dockerfile),
            возможно записать все изменения, сделанные в контейнере, в новый образ (docker commit). Все команды могут работать как с docker-демоном локальной системы,
            так и с любым сервером Docker, доступным по сети. Кроме того, в интерфейсе командной строки встроены возможности по взаимодействию с публичным репозиторием Docker Hub,
            в котором размещены предварительно собранные образы приложений, например, команда docker search позволяет осуществить поиск образов среди размещённых в нём[20],
            образы можно скачивать в локальную систему (docker pull), возможно также отправить локально собранные образы в Docker Hub (docker push).</p>
        <p>Также Docker имеет пакетный менеджер Docker Compose, позволяющий описывать и запускать многоконтейнерные приложения;
            конфигурационные файлы для него описываются на языке YAML.</p>
        <hr/>
        <h3>Список основных образов docker</h3>
        <ul>
            <li><a href="https://hub.docker.com/_/nginx">Nginx</a></li>
            <li><a href="https://hub.docker.com/_/postgres">PostgreSql</a></li>
            <li><a href="https://hub.docker.com/_/debian">Debian</a></li>
        </ul>
        <hr/>
        <h3>Существует несколько способо запустить контейнер:</h3>
        <ol>
            <li>Docker Run</li>
            <li>Docker Compose</li>
            <li>Docker Swarm</li>
        </ol>
        <hr/>
        <p>Более подрорбно можете ознакомиться на официальном сайте <a href="https://www.docker.com/">Docker</a></p>
        <hr/>
        <h3>Сравнение Kubernetes и Docker swarm</h3>
        <table class="compare-table">
            <tr>
                <td></td>
                <td>Docker Swarm</td>
                <td>Kubernetes</td>
            </tr>
            <tr>
                <td>Controller</td>
                <td>Manager</td>
                <td>Master</td>
            </tr>
            <tr>
                <td>Slave</td>
                <td>Worker</td>
                <td>Nodes</td>
            </tr>
            <tr>
                <td>Port</td>
                <td>PubkishedPort</td>
                <td>Endpoint</td>
            </tr>
        </table>
    </section>
</div>
<div class="btn-up btn-up_hide">
    <img alt="buttonUp" src="~/imgs/ButtonUp.png"/>
</div>
<div class="window-img window-img_hide">
    <img alt="windowImg" src="" onclick="closeImageWindow()"/>
</div>
<hr/>
</body>
<footer>Copyright 2023</footer>
</html>